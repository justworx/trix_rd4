
PREP TO HANDLE SIGHUP AND SIGTERM

The idea here is to call shutdown for all Runner objects. They're
the ones that could leave remote processes held open after the 
main process dies, orphaning the subprocesses. A Runner.stopall() 
classmethod would call all Runner objects shutdown methods. We'll
need a class variable that stores all Runners, and changes to 
__init__ and __del__ keep this class variable up-to-date.

trix.signals(signal.SIGHUP, Runner.stopall)
trix.signals(signal.SIGTERM, Runner.stopall)

NOTE: I don't know in what situations this would work, nor whether
      it would work in any situation. I think it's worth a try to 
      find out.




#
# SERVER MESSAGES
#

Update this so that messages are written to a Buffer object, rather
than being stored to a list. This feature was originally meant as a
temporary debugging tool, but I think it could be a useful runtime
debugging/logging feature.






#
# THINK ABOUT...
#  - How about a `ps` classmethod in Process which would split the
#    result of... oh wait. What about Windows? UGH!
#
# ALSO...
#  - It may be useful to make Process a context manager; have to 
#    think about this.
#  - Might be useful for Signal, too.
#



